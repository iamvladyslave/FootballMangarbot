import os
from background import keep_alive  #–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
import pip

pip.main(['install', 'pytelegrambotapi'])

import telebot
from telebot import types
import time

# –í–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot('7570511427:AAFqCLAEQqsGRN051tNF8QxZ10KONN0pPA4')

# –í–∞—à username
ADMIN_USERNAME = '@romanMR7'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
sent_messages = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

about_me_text = ("–ú–µ–Ω—è –∑–æ–≤—É—Ç [–í–∞—à–µ –∏–º—è], –∏ —è —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç! ü§ñ\n\n"
                 "üì∏ –í–æ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ.")

about_pricing = ("üí∏ **–†–∞—Å—Ü–µ–Ω–∫–∏**:\n- –ú–æ–∏ —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Ç–∞–∫–æ–≤—ã ... \n-")

about_terms = ("üë®‚Äçüíª **–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã**:\n1. –ú–æ–∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã —Ç–∞–∫–æ–≤—ã ... ")


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    if user_id == 1042810675:
        show_tasks_panel_admin(message)
    else:
        show_main_menu(message)


# –ö–æ–º–∞–Ω–¥–∞ /menu
@bot.message_handler(commands=['menu'])
def start(message):
    user_id = message.from_user.id
    show_tasks_panel(message)


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['tasks'])
def start(message):
    user_id = message.from_user.id
    show_tasks_panel(message)


# –ö–æ–º–∞–Ω–¥–∞ /pricing
@bot.message_handler(commands=['pricing'])
def show_pricing(message):
    user_id = message.from_user.id
    pricing_message = bot.send_message(user_id, f"{about_pricing}")
    save_sent_message(user_id, pricing_message.message_id)
    show_back_button(message)


# –ö–æ–º–∞–Ω–¥–∞ /terms
@bot.message_handler(commands=['terms'])
def show_terms(message):
    user_id = message.from_user.id
    terms_message = bot.send_message(user_id, f"{about_terms}")
    save_sent_message(user_id, terms_message.message_id)
    show_back_button(message)


# –ö–æ–º–∞–Ω–¥–∞ /contact
@bot.message_handler(commands=['contact'])
def show_contact(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    bot.register_next_step_handler(message, get_age)


def show_tasks_panel_admin(message):
    try:
        task_text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –ê–¥–º–∏–Ω! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–æ—Ç–µ:"
        panel = types.InlineKeyboardMarkup(row_width=2)
        panel.add(
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å '–û–±–æ –º–Ω–µ'",
                                       callback_data="edit1"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit2"),
            types.InlineKeyboardButton("–ù–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏",
                                       callback_data="edit3"),
            types.InlineKeyboardButton("–ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã",
                                       callback_data="edit4"),
        )
        bot.send_message(message.chat.id, task_text, reply_markup=panel)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_tasks_panel: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        if call.data == "about_me":
            photo_path = "download.png"  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª
            try:
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(call.message.chat.id,
                                   photo,
                                   caption=about_me_text)
            except FileNotFoundError:
                bot.send_message(call.message.chat.id,
                                 "–§–∞–π–ª download.png –Ω–µ –Ω–∞–π–¥–µ–Ω!")

            # –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
            panel = types.InlineKeyboardMarkup(row_width=2)
            panel.add(
                types.InlineKeyboardButton("–†–∞—Å—Ü–µ–Ω–∫–∏üí∏",
                                           callback_data="pricing"),
                types.InlineKeyboardButton("–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ãüë®‚Äçüíª",
                                           callback_data="terms"),
                types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–πüìû",
                                           callback_data="contact"))
            bot.send_message(call.message.chat.id,
                             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
                             reply_markup=panel)

        if call.data == "pricing":

            pricing_message = bot.send_message(call.message.chat.id,
                                               f"{about_pricing}")
            save_sent_message(call.message.chat.id, pricing_message.message_id)
            show_back_button(call.message, pricing_message)

        elif call.data == "terms":

            terms_message = bot.send_message(call.message.chat.id,
                                             f"{about_terms}")
            save_sent_message(call.message.chat.id, terms_message.message_id)
            show_back_button(call.message, terms_message)

        elif call.data == "contact":

            bot.send_message(call.message.chat.id, "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
            bot.register_next_step_handler(call.message, get_age)

        elif call.data == "back_to_menu":
            delete_previous_messages(
                call.message.chat.id
            )  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º

        elif call.data == "edit1":
            delete_previous_messages(call.message.chat.id)
            terms_message = bot.send_message(call.message.chat.id,
                                             "–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            bot.register_next_step_handler(call.message, update_about_me_text)
        elif call.data == "edit2":
            delete_previous_messages(call.message.chat.id)
            bot.send_message(
                call.message.chat.id,
                "üë® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ.")
            bot.register_next_step_handler(call.message, receive_new_photo)
        elif call.data == "edit3":
            delete_previous_messages(call.message.chat.id)
            terms_message = bot.send_message(call.message.chat.id,
                                             "–£–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏")
            bot.register_next_step_handler(call.message, update_pricing)
        elif call.data == "edit4":
            delete_previous_messages(call.message.chat.id)
            terms_message = bot.send_message(call.message.chat.id,
                                             "–û–±–Ω–æ–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã")
            bot.register_next_step_handler(call.message, update_terms)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    if message.text.lower() not in [
            '/start', '/menu', '/tasks', '/pricing', '/terms', '/contact'
    ]:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        show_tasks_panel(message)


def update_about_me_text(message):
    global about_me_text
    try:
        new_text = message.text
        if new_text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            about_me_text = new_text
            bot.send_message(message.chat.id,
                             "‚úÖ –¢–µ–∫—Å—Ç '–û–±–æ –º–Ω–µ' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            show_tasks_panel_admin(message)
        else:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, update_about_me_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_about_me_text: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, update_about_me_text)


def update_pricing(message):
    global about_pricing
    try:
        new_text_pricing = message.text
        if new_text_pricing.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            about_pricing = new_text_pricing
            bot.send_message(message.chat.id,
                             "‚úÖ –¢–µ–∫—Å—Ç '–†–∞—Å—Ü–µ–Ω–∫–∏' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            show_tasks_panel_admin(message)
        else:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, update_pricing)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_pricing: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, update_pricing)


def update_terms(message):
    global about_terms
    try:
        new_text1 = message.text
        if new_text1.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            about_terms = new_text1
            bot.send_message(message.chat.id,
                             "‚úÖ –¢–µ–∫—Å—Ç '–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            show_tasks_panel_admin(message)
        else:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, update_terms)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_terms: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, update_terms)


def receive_new_photo(message):
    try:
        if message.content_type == 'photo':
            file_id = message.photo[
                -1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø–æ–¥ –∏–º–µ–Ω–µ–º download.png
            with open("download.png", "wb") as new_file:
                new_file.write(downloaded_file)

            bot.send_message(
                message.chat.id,
                "‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ download.png.")
            show_tasks_panel_admin(message)
        else:
            bot.send_message(message.chat.id,
                             "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, receive_new_photo)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ receive_new_photo: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, receive_new_photo)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(message):
    welcome_text = ("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!\n\n"
                    "üéÆ –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:\n"
                    "- –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ.\n"
                    "- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏.\n"
                    "- –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π!")
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ö—Ç–æ —è?", callback_data="about_me")
    markup.add(button)
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
def show_tasks_panel(message):
    try:
        task_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        panel = types.InlineKeyboardMarkup(row_width=2)
        panel.add(
            types.InlineKeyboardButton("–†–∞—Å—Ü–µ–Ω–∫–∏üí∏", callback_data="pricing"),
            types.InlineKeyboardButton("–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ãüë®‚Äçüíª",
                                       callback_data="terms"),
            types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–πüìû",
                                       callback_data="contact"))
        bot.send_message(message.chat.id, task_text, reply_markup=panel)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_tasks_panel: {e}")


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
def show_back_button(message, previous_message_id=None):
    try:

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥",
                                          callback_data="back_to_menu")
        markup.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        back_message = bot.send_message(message.chat.id,
                                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                        reply_markup=markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏
        save_sent_message(message.chat.id, back_message.message_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_back_button: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
def save_sent_message(chat_id, message_id):
    if chat_id not in sent_messages:
        sent_messages[chat_id] = []
    sent_messages[chat_id].append(message_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def delete_previous_messages(chat_id):
    try:
        if chat_id in sent_messages:
            for message_id in sent_messages[chat_id]:
                bot.delete_message(chat_id, message_id)
            sent_messages[chat_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_previous_messages: {e}")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
def get_age(message):
    try:
        age = int(message.text)
        user_data[message.chat.id] = {'age': age}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        bot.send_message(message.chat.id,
                         f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age}. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, get_name)
    except ValueError:
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")
        bot.register_next_step_handler(message, get_age)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_age: {e}")


def get_name(message):
    try:
        name = message.text
        user_data[message.chat.id]['name'] = name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        bot.send_message(
            message.chat.id,
            f"–°–ø–∞—Å–∏–±–æ, {name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º Telegram-–∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            reply_markup=contact_share_markup())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_name: {e}")


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def contact_share_markup():
    try:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        contact_button = types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
                                              request_contact=True)
        markup.add(contact_button)
        return markup
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ contact_share_markup: {e}")


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    try:
        if message.contact:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            name = user_data.get(message.chat.id, {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            age = user_data.get(message.chat.id, {}).get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å HTML
            contact_info = ("<b>üö® –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç! üö®</b>\n"
                            "<b>üì± –ò–º—è:</b> {0}\n"
                            "<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {1}\n"
                            "<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {2}\n".format(
                                name, age, message.contact.phone_number))
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            bot.send_message('1042810675', contact_info, parse_mode='HTML')

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(message.chat.id,
                             "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                             reply_markup=types.ReplyKeyboardRemove())

            # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            show_tasks_panel(message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_contact: {e}")


keep_alive()  #–∑–∞–ø—É—Å–∫–∞–µ–º flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ...
bot.polling(non_stop=True, interval=0)  #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞




