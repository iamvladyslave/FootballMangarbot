import telebot
from telebot import types
import logging
import datetime
import os
import json
from telebot import apihelper

# –í–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot('8200449235:AAGtg-RPw3G8L32ykxqrRbodH0Rx-7UtAqM')

# –í–∞—à username
ADMIN_USERNAME = '@matagency_official'
ADMIN_ID = None  # –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
sent_messages = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤)
# –í–º–µ—Å—Ç–æ ADMIN_ID = 677342937
# ADMIN_USERNAME = '@vVv_075'
# ADMIN_ID = None  # –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(filename='log.txt', level=logging.ERROR, format='%(asctime)s %(levelname)s:%(message)s')

def log_error(e, context='', chat_id=None):
    error_text = f'–û—à–∏–±–∫–∞: {e}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}'
    logging.error(error_text)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –≤ Telegram
    try:
        if chat_id != ADMIN_ID:
            bot.send_message(ADMIN_ID, f'‚ùóÔ∏è–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n–û—à–∏–±–∫–∞: {e}')
    except Exception as send_err:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É: {send_err}')


about_me_text = (
    "–ú–µ–Ω—è –∑–æ–≤—É—Ç [–í–∞—à–µ –∏–º—è], –∏ —è —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç! ü§ñ\n\n"
    "üì∏ –í–æ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ."
)

about_pricing = (
    "üí∏ **–†–∞—Å—Ü–µ–Ω–∫–∏**:\n- –ú–æ–∏ —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Ç–∞–∫–æ–≤—ã ... \n-"
)

about_terms = (
    "üë®‚Äçüíª **–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã**:\n1. –ú–æ–∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã —Ç–∞–∫–æ–≤—ã ... "
)

PHOTOS_DIR = 'photos'
PHOTOS_JSON = os.path.join(PHOTOS_DIR, 'photos.json')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ
def load_photos():
    if not os.path.exists(PHOTOS_JSON):
        return []
    with open(PHOTOS_JSON, 'r') as f:
        try:
            return json.load(f)
        except Exception:
            return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ
def save_photos(photo_list):
    with open(PHOTOS_JSON, 'w') as f:
        json.dump(photo_list, f)


def get_admin_id():
    global ADMIN_ID
    if ADMIN_ID is not None:
        return ADMIN_ID
    try:
        user = bot.get_chat(f'@{ADMIN_USERNAME}')
        ADMIN_ID = user.id
        return ADMIN_ID
    except Exception as e:
        log_error(e, 'get_admin_id')
        return None


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    if user_id == get_admin_id(): 
        show_tasks_panel_admin(message)
    else:
        show_main_menu(message)

# –ö–æ–º–∞–Ω–¥–∞ /menu
@bot.message_handler(commands=['menu'])
def handle_menu(message):
    show_tasks_panel(message)

# –ö–æ–º–∞–Ω–¥–∞ /tasks
@bot.message_handler(commands=['tasks'])
def handle_tasks(message):
    show_tasks_panel(message)




# –ö–æ–º–∞–Ω–¥–∞ /pricing
@bot.message_handler(commands=['pricing'])
def show_pricing(message):
    user_id = message.from_user.id
    pricing_message = bot.send_message(user_id, f"{about_pricing}")
    save_sent_message(user_id, pricing_message.message_id)
    show_back_button(message)

# –ö–æ–º–∞–Ω–¥–∞ /terms
@bot.message_handler(commands=['terms'])
def show_terms(message):
    user_id = message.from_user.id
    terms_message = bot.send_message(user_id, f"{about_terms}")
    save_sent_message(user_id, terms_message.message_id)
    show_back_button(message)

# –ö–æ–º–∞–Ω–¥–∞ /contact
@bot.message_handler(commands=['contact'])
def show_contact(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    bot.register_next_step_handler(message, get_age)







# =====================
# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
# =====================
def show_tasks_panel_admin(message):
    try:
        task_text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –ê–¥–º–∏–Ω! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–æ—Ç–µ:"
        panel = types.InlineKeyboardMarkup(row_width=2)
        panel.add(
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å '–û–±–æ –º–Ω–µ'", callback_data="edit1"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit2"),
            types.InlineKeyboardButton("–ù–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏", callback_data="edit3"),
            types.InlineKeyboardButton("–ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã", callback_data="edit4"),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit2del"),
        )
        bot.send_message(message.chat.id, task_text, reply_markup=panel)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_tasks_panel: {e}")
        log_error(e, 'show_tasks_panel_admin', message.chat.id)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        if call.data == "about_me":
            photo_list = load_photos()
            if not photo_list:
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            else:
                for idx, photo_path in enumerate(photo_list):
                    with open(photo_path, 'rb') as photo:
                        caption = about_me_text if idx == 0 else None
                        bot.send_photo(call.message.chat.id, photo, caption=caption)
            # –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
            panel = types.InlineKeyboardMarkup(row_width=2)
            panel.add(
                types.InlineKeyboardButton("–†–∞—Å—Ü–µ–Ω–∫–∏üí∏", callback_data="pricing"),
                types.InlineKeyboardButton("–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ãüë®‚Äçüíª", callback_data="terms"),
                types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–πüìû", callback_data="contact")
            )
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=panel)

        if call.data == "pricing":
            
            pricing_message = bot.send_message(call.message.chat.id, f"{about_pricing}")
            save_sent_message(call.message.chat.id, pricing_message.message_id)
            show_back_button(call.message, pricing_message)

        elif call.data == "terms":
            
            terms_message = bot.send_message(call.message.chat.id, f"{about_terms}")
            save_sent_message(call.message.chat.id, terms_message.message_id)
            show_back_button(call.message, terms_message)

        elif call.data == "contact":

            bot.send_message(call.message.chat.id, "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
            bot.register_next_step_handler(call.message, get_age)

        elif call.data == "back_to_menu":
            delete_previous_messages(call.message.chat.id)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
            

        elif call.data == "edit1":
            delete_previous_messages(call.message.chat.id)
            terms_message = bot.send_message(call.message.chat.id, "–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            bot.register_next_step_handler(call.message, update_about_me_text)
        elif call.data == "edit2":
            delete_previous_messages(call.message.chat.id)
            bot.send_message(call.message.chat.id, "üë® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ—é.")
            bot.register_next_step_handler(call.message, receive_new_photo)
        elif call.data == "edit2del":
            delete_previous_messages(call.message.chat.id)
            photo_list = load_photos()
            if not photo_list:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                show_tasks_panel_admin(call.message)
            else:
                markup = types.InlineKeyboardMarkup(row_width=1)
                for idx, path in enumerate(photo_list):
                    markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ {idx+1}", callback_data=f"delphoto_{idx}"))
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        elif call.data.startswith("delphoto_"):
            idx = int(call.data.split('_')[1])
            photo_list = load_photos()
            if 0 <= idx < len(photo_list):
                try:
                    os.remove(photo_list[idx])
                except Exception:
                    pass
                del photo_list[idx]
                save_photos(photo_list)
                bot.send_message(call.message.chat.id, "–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!")
            else:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
            show_tasks_panel_admin(call.message)

        elif call.data == "edit3":
            delete_previous_messages(call.message.chat.id)
            terms_message = bot.send_message(call.message.chat.id, "–£–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏")
            bot.register_next_step_handler(call.message, update_pricing)
        elif call.data == "edit4":
            delete_previous_messages(call.message.chat.id)
            terms_message = bot.send_message(call.message.chat.id, "–û–±–Ω–æ–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã")
            bot.register_next_step_handler(call.message, update_terms)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        log_error(e, 'callback_query', call.message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    if message.text.lower() not in ['/start', '/menu', '/tasks', '/pricing', '/terms', '/contact']:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        show_tasks_panel(message)


def update_about_me_text(message):
    global about_me_text
    try:
        new_text = message.text
        if new_text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            about_me_text = new_text
            bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç '–û–±–æ –º–Ω–µ' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            show_tasks_panel_admin(message)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, update_about_me_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_about_me_text: {e}")
        log_error(e, 'update_about_me_text', message.chat.id)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, update_about_me_text)

def update_pricing(message):
    global about_pricing
    try:
        new_text_pricing = message.text
        if new_text_pricing.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            about_pricing = new_text_pricing
            bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç '–†–∞—Å—Ü–µ–Ω–∫–∏' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            show_tasks_panel_admin(message)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, update_pricing)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_pricing: {e}")
        log_error(e, 'update_pricing', message.chat.id)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, update_pricing)

def update_terms(message):
    global about_terms
    try:
        new_text1 = message.text
        if new_text1.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            about_terms = new_text1
            bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç '–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            show_tasks_panel_admin(message)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, update_terms)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_terms: {e}")
        log_error(e, 'update_terms', message.chat.id)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, update_terms)








def receive_new_photo(message):
    try:
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            if not os.path.exists(PHOTOS_DIR):
                os.makedirs(PHOTOS_DIR)
            photo_list = load_photos()
            new_photo_path = os.path.join(PHOTOS_DIR, f"photo_{len(photo_list)+1}.png")
            with open(new_photo_path, "wb") as new_file:
                new_file.write(downloaded_file)
            photo_list.append(new_photo_path)
            save_photos(photo_list)
            bot.send_message(message.chat.id, "‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–∞–ª–µ—Ä–µ—é.")
            show_tasks_panel_admin(message)
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            bot.register_next_step_handler(message, receive_new_photo)
    except Exception as e:
        log_error(e, 'receive_new_photo', message.chat.id)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, receive_new_photo)





# =====================
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏: –∞–Ω–∫–µ—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç, –º–µ–Ω—é
# =====================
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def show_main_menu(message):
    delete_previous_messages(message.chat.id)
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!\n\n"
        "üéÆ –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:\n"
        "- –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ.\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏.\n"
        "- –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π!"
    )
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ö—Ç–æ —è?", callback_data="about_me")
    markup.add(button)
    msg = bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
    save_sent_message(message.chat.id, msg.message_id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
def show_tasks_panel(message):
    try:
        delete_previous_messages(message.chat.id)
        task_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        panel = types.InlineKeyboardMarkup(row_width=2)
        panel.add(
            types.InlineKeyboardButton("–†–∞—Å—Ü–µ–Ω–∫–∏üí∏", callback_data="pricing"),
            types.InlineKeyboardButton("–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ãüë®‚Äçüíª", callback_data="terms"),
            types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–πüìû", callback_data="contact")
        )
        msg = bot.send_message(message.chat.id, task_text, reply_markup=panel)
        save_sent_message(message.chat.id, msg.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_tasks_panel: {e}")
        log_error(e, 'show_tasks_panel', message.chat.id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
def show_back_button(message, previous_message_id=None):
    try:
  

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")
        markup.add(back)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        back_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏
        save_sent_message(message.chat.id, back_message.message_id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_back_button: {e}")
        log_error(e, 'show_back_button', message.chat.id)


# =====================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∫–Ω–æ–ø–∫–∏
# =====================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
def save_sent_message(chat_id, message_id):
    if chat_id not in sent_messages:
        sent_messages[chat_id] = []
    sent_messages[chat_id].append(message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def delete_previous_messages(chat_id):
    try:
        if chat_id in sent_messages:
            for message_id in sent_messages[chat_id]:
                bot.delete_message(chat_id, message_id)
            sent_messages[chat_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ delete_previous_messages: {e}")
        log_error(e, 'delete_previous_messages', chat_id)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
def get_age(message):
    try:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É ‚Äî –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é
        if message.text.startswith('/'):
            show_tasks_panel(message)
            return
        age = int(message.text)
        if age < 1 or age > 100:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100):")
            bot.register_next_step_handler(message, get_age)
            return
        user_data[message.chat.id] = {'age': age}
        bot.send_message(message.chat.id, f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age}. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, get_name)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")
        bot.register_next_step_handler(message, get_age)
    except Exception as e:
        log_error(e, 'get_age', message.chat.id)

def get_name(message):
    try:
        if message.text.startswith('/'):
            show_tasks_panel(message)
            return
        name = message.text
        if len(name) < 2 or len(name) > 30:
            bot.send_message(message.chat.id, "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            bot.register_next_step_handler(message, get_name)
            return
        user_data[message.chat.id]['name'] = name
        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ, {name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º Telegram-–∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=contact_share_markup())
    except Exception as e:
        log_error(e, 'get_name', message.chat.id)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def contact_share_markup():
    try:
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        contact_button = types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        markup.add(contact_button)
        return markup
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ contact_share_markup: {e}")
        log_error(e, 'contact_share_markup')

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    try:
        if message.contact:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            name = user_data.get(message.chat.id, {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            age = user_data.get(message.chat.id, {}).get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å HTML
            contact_info = (
                "<b>üö® –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç! üö®</b>\n"
                "<b>üì± –ò–º—è:</b> {0}\n"
                "<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {1}\n"
                "<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {2}\n".format(name, age, message.contact.phone_number)
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            bot.send_message(get_admin_id(), contact_info, parse_mode='HTML')

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())

            # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            show_tasks_panel(message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_contact: {e}")
        log_error(e, 'handle_contact', message.chat.id)

# =====================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =====================
try:
    bot.polling(non_stop=True)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    log_error(e, 'bot.polling')
    
    
    
    
  